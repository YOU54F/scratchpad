version: "3.1"

services:
  postgres:
    build:
      context: ./docker
      dockerfile: pg.Dockerfile
    restart: always
    environment:
      POSTGRES_PASSWORD: $PGPASSWORD
      POSTGRES_USER: $PGUSER
      POSTGRES_HOST: $PGHOST
      POSTGRES_DB: $PGDATABASE
      POSTGRES_PASSWORD_REP: $PGPASSWORDREP
      POSTGRES_USER_REP: $PGUSEREP
    ports:
      - 5432:5432

  stream_wal2json:
    build:
      context: stream
    depends_on:
      - postgres
      - localstack
    volumes:
      - .:/app:cached
    restart: always
    environment:
      POSTGRES_PASSWORD: $PGPASSWORD
      POSTGRES_USER: $PGUSER
      POSTGRES_HOST: $PGHOST
      POSTGRES_DB: $PGDATABASE
      POSTGRES_PASSWORD_REP: $PGPASSWORDREP
      POSTGRES_USER_REP: $PGUSEREP
      PGSSLMODE: disable
      CURRENT_ENV: $CURRENT_ENV
      LOCALSTACK_URL: $LOCALSTACK_URL
      AWS_ACCESS_KEY_ID: $FAKE_AWS_ACCESS_KEY_ID
      AWS_SECRET_ACCESS_KEY: $FAKE_AWS_SECRET_ACCESS_KEY
      AWS_DEFAULT_REGION: $AWS_DEFAULT_REGION
      REPLICATION_KINESIS_STREAM_NAME: $REPLICATION_KINESIS_STREAM_NAME_WAL2JSON
      REPLICATION_FIREHOSE_NAME: $REPLICATION_FIREHOSE_NAME_WAL2JSON
      REPLICATION_S3_BUCKET: $REPLICATION_S3_BUCKET_WAL2JSON
      REPLICATION_SLOT_NAME: $REPLICATION_SLOT_NAME_WAL2JSON
      REPLICATION_SLOT_TYPE: $REPLICATION_SLOT_TYPE_WAL2JSON

  stream_testdecoding:
    build:
      context: stream
    depends_on:
      - postgres
      - localstack
    volumes:
      - .:/app:cached
    restart: always
    environment:
      POSTGRES_PASSWORD: $PGPASSWORD
      POSTGRES_USER: $PGUSER
      POSTGRES_HOST: $PGHOST
      POSTGRES_DB: $PGDATABASE
      POSTGRES_PASSWORD_REP: $PGPASSWORDREP
      POSTGRES_USER_REP: $PGUSEREP
      PGSSLMODE: disable
      CURRENT_ENV: $CURRENT_ENV
      LOCALSTACK_URL: $LOCALSTACK_URL
      AWS_ACCESS_KEY_ID: $FAKE_AWS_ACCESS_KEY_ID
      AWS_SECRET_ACCESS_KEY: $FAKE_AWS_SECRET_ACCESS_KEY
      AWS_DEFAULT_REGION: $AWS_DEFAULT_REGION
      REPLICATION_KINESIS_STREAM_NAME: $REPLICATION_KINESIS_STREAM_NAME_TESTDECODING
      REPLICATION_FIREHOSE_NAME: $REPLICATION_FIREHOSE_NAME_TESTDECODING
      REPLICATION_S3_BUCKET: $REPLICATION_S3_BUCKET_TESTDECODING
      REPLICATION_SLOT_NAME: $REPLICATION_SLOT_NAME_TESTDECODING
      REPLICATION_SLOT_TYPE: $REPLICATION_SLOT_TYPE_TESTDECODING

  localstack:
    image: localstack/localstack
    ports:
      - 4566:4566
    environment:
      LOCALSTACK_SERVICES: kinesis,firehose,s3
      AWS_ACCESS_KEY_ID: $FAKE_AWS_ACCESS_KEY_ID
      AWS_SECRET_ACCESS_KEY: $FAKE_AWS_SECRET_ACCESS_KEY
      POSTGRES_PASSWORD: $PGPASSWORD
      POSTGRES_USER: $PGUSER
      POSTGRES_HOST: $PGHOST
      POSTGRES_DB: $PGDATABASE
      POSTGRES_PASSWORD_REP: $PGPASSWORDREP
      POSTGRES_USER_REP: $PGUSEREP
      CURRENT_ENV: $CURRENT_ENV
      REPLICATION_KINESIS_STREAM_NAME_WAL2JSON: $REPLICATION_KINESIS_STREAM_NAME_WAL2JSON
      REPLICATION_FIREHOSE_NAME_WAL2JSON: $REPLICATION_FIREHOSE_NAME_WAL2JSON
      REPLICATION_S3_BUCKET_WAL2JSON: $REPLICATION_S3_BUCKET_WAL2JSON
      REPLICATION_KINESIS_STREAM_NAME_TESTDECODING: $REPLICATION_KINESIS_STREAM_NAME_TESTDECODING
      REPLICATION_FIREHOSE_NAME_TESTDECODING: $REPLICATION_FIREHOSE_NAME_TESTDECODING
      REPLICATION_S3_BUCKET_TESTDECODING: $REPLICATION_S3_BUCKET_TESTDECODING
    volumes:
      - "./docker/init/localstack:/docker-entrypoint-initaws.d"